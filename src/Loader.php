<?php

/**
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 **/

namespace Pdr\Ppm;

/**
 * Autoload class, ie. vendor/autoload.php
 **/

class Loader {

	public function create() {

		trigger_error("Generate autoload file ..", E_USER_NOTICE);

		$project = new \Pdr\Ppm\Project;

		$autoloadFunctionName = 'ppm_autoload_'.md5(uniqid('', TRUE));

		$autoloadFile = $project->getVendorDir().'/autoload.php';
		$autoloadClassMapText = '';
		$autoloadText  = "<?php\n\n";
		$autoloadText .= "// DO NOT EDIT. THIS FILE IS AUTOGENERATED. ".date('Y-m-d H:i:s')."\n\n";
		$autoloadText .= "function $autoloadFunctionName(\$className){\n\n";
		$autoloadText .= "\t\$vendorDir = dirname(__FILE__);\n";
		$autoloadText .= "\t\$projectDir = dirname(\$vendorDir);\n\n";

		$composerFile = $project->getPath().'/ppm.json';
		if (is_file($composerFile) == FALSE){
			$composerFile = $project->getPath().'/composer.json';
		}

		$packageDir = '$projectDir';
		$autoloadText .= $this->initAutoloadFile($packageDir, $composerFile);

		if (is_dir(dirname($autoloadFile)) == false) {
			mkdir(dirname($autoloadFile));
		}

		foreach ($project->packages as $package) {
			$packageName = $package->name;
			if ($packageName == 'php'){
				continue;
			}
			$composerFile = $project->getVendorDir().'/'.$packageName.'/ppm.json';
			if (is_file($composerFile) == FALSE){
				$composerFile = $project->getVendorDir().'/'.$packageName.'/composer.json';
			}
			$packageDir = '$vendorDir.\'/'.$packageName.'\'';
			$autoloadText .= $this->initAutoloadFile($packageDir, $composerFile);
		}

		foreach ($project->developmentPackages as $package) {
			$packageName = $package->name;
			if ($packageName == 'php'){
				continue;
			}
			$composerFile = $project->getVendorDir().'/'.$packageName.'/ppm.json';
			if (is_file($composerFile) == FALSE){
				$composerFile = $project->getVendorDir().'/'.$packageName.'/composer.json';
			}
			$packageDir = '$vendorDir.\'/'.$packageName.'\'';
			$autoloadText .= $this->initAutoloadFile($packageDir, $composerFile);
		}

		$autoloadText .= "}\n\nspl_autoload_register('$autoloadFunctionName');\n";

		file_put_contents($autoloadFile, $autoloadText);
	}


	/**
	 * @return string autoloadText
	 **/

	protected function initAutoloadFile($packageDir, $composerFile) {

		$autoloadText = "\t".'// package '
			.str_replace(array('$vendorDir.\'/',"'"), '', $packageDir)
			."\n\n";

		if (is_file($composerFile) == FALSE) {
			return $autoloadText;
		}

		$text =  file_get_contents($composerFile);
		$data =  json_decode($text, TRUE);
		if (json_last_error() != 0){
			throw new \Exception("JSON Parse Error. '$composerFile'");
		}

		if (isset($data['autoload']) == FALSE) {
			return $autoloadText;
		}

		foreach ($data['autoload'] as $method => $autoload){

			// classmap

			if ($method == 'classmap') {
				$autoloadText .= "\t// > autoload classmap\n";
				foreach ($autoload as $autoloadSourceFile){
					$autoloadText .= "\t\$classFile = ".$packageDir.".'/".$autoloadSourceFile."';\n";
					$autoloadText .= "\tif (is_file(\$classFile)){ require_once(\$classFile); }\n\n";
				}
				continue;
			}

			// psr-4

			if ($method == 'psr-4'){
				$autoloadText .= "\t// > autoload psr-4\n\n";
				foreach ($autoload as $classPrefix => $pathPrefix){
					$classPrefixLength = strlen($classPrefix);
					$pathPrefix = $packageDir.'.\'/'.$pathPrefix.'\'';
					$autoloadText .= "\tif (substr(\$className,0,$classPrefixLength) == '".str_replace('\\', '\\\\', $classPrefix)."'){\n";
					$autoloadText .= "\t\t\$classFile = $pathPrefix.str_replace('\\\\','/',substr(\$className, $classPrefixLength)).'.php';\n";
					$autoloadText .= "\t\tif (is_file(\$classFile)){ require_once(\$classFile); }\n";
					$autoloadText .= "\t}\n\n";
				}
				continue;
			}

			// psr-0

			if ($method == 'psr-0'){
				$autoloadText .= "\t// > autoload psr-0\n\n";
				foreach ($autoload as $classPrefix => $pathPrefix){
					$classPrefixLength = strlen($classPrefix);
					$pathPrefix = $packageDir.'.\'/'.$pathPrefix.'\'';
					$autoloadText .= "\tif (substr(\$className,0,$classPrefixLength) == '".str_replace('\\', '\\\\', $classPrefix)."'){\n";
					$autoloadText .= "\t\t\$classFile = $pathPrefix.str_replace('\\\\','/',\$className).'.php';\n";
					$autoloadText .= "\t\tif (is_file(\$classFile)){ require_once(\$classFile); }\n";
					$autoloadText .= "\t}\n\n";
				}
				continue;
			}

			// files

			if ($method == 'files'){
				$autoloadText .= "\t// > autoload files\n\n";
				foreach ($autoload as $filePath){
					$autoloadText .= "\t\$classFile = $packageDir.'/$filePath';\n";
					$autoloadText .= "\tif (is_file(\$classFile)){ require_once(\$classFile); }\n";
					$autoloadText .= "\n\n";
				}
				continue;
			}

			fwrite(STDERR, "WARNING Unsupported autoload method '$method'\n");
		}

		return $autoloadText;
	}
}
